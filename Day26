1791. Find Center of Star Graph
class Solution {
public:
    int findCenter(vector<vector<int>>& edges) {
        if(edges[0][0]==edges[1][0])return edges[0][0];
        else if(edges[0][0]==edges[1][1])return edges[0][0];
        else return edges[0][1];
    }
};


139. Word Break
class Solution {
public:
    int solve(string s, vector<string>& wordDict, unordered_map<string, int>&dp){
         int size = s.length();
         if(size == 0)return 1;

         if (dp.find(s) != dp.end()) return dp[s];
         for(int i=1;i<=size;i++){
            int f = 0;
            string st = s.substr(0,i);
            for(int j=0;j<wordDict.size();j++){
                if(st.compare(wordDict[j]) == 0){
                    f = 1;
                    break;
                }
            }
            if(f == 1 && solve(s.substr(i,size-i), wordDict, dp) == 1)return dp[s] = 1;
         }
         return dp[s] = 0;
    }
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_map<string,int>dp;
        
        int ans = solve(s, wordDict, dp);
        if(ans == 1)return true;
        return false;
    }
};

1011. Capacity To Ship Packages Within D Days
class Solution {
public:
    bool isPossible(vector<int>& weights, int days, int mid, int s, int e){
        int daysCount = 1;
        int weightCount = 0;
        for(int i=0;i<weights.size();i++){
            if(weightCount + weights[i] <= mid){
                weightCount += weights[i];
            }
            else{
                daysCount++;
                if(daysCount > days || weights[i] > mid)return false;
                weightCount = weights[i];
            }
        }
        return true;
    }
    int shipWithinDays(vector<int>& weights, int days) {
        int s = 0;
        int sum = 0;
        for(int i=0;i<weights.size();i++){
            sum += weights[i];
        }
        int e = sum;
        int ans = -1;
        while(s <= e){
            int mid = s+(e-s)/2;
            if(isPossible(weights, days, mid, s, e)){
                ans = mid;
                e = mid -1;
            }
            else{
                s = mid + 1;
            }
        }
        return ans;
    }
};
