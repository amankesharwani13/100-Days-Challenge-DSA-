2191. Sort the Jumbled Numbers
class Solution {
public:
    struct cmp{
        bool operator()(pair<int,pair<int,int>> &a, pair<int,pair<int,int>> &b){
            if(a.first == b.first)return a.second.second > b.second.second;
            return a.first > b.first;
        }
    };
    vector<int> sortJumbled(vector<int>& mapping, vector<int>& nums) {
        vector<int>ans;
        priority_queue<pair<int,pair<int,int>>, vector<pair<int,pair<int,int>>>, cmp>pq;
        for(int i=0;i<nums.size();i++){
            int num = nums[i], getnum = 0, multiplier = 1;
            if(num == 0){
                pq.push({mapping[0], {nums[i], i}});
                continue;
            }
            while(num > 0){
                int x = num % 10;
                int y = mapping[x];
                getnum = getnum + y * multiplier;
                num = num/10;
                multiplier *= 10;
            }
            pq.push({getnum, {nums[i], i}});
        }
        while(!pq.empty()){
            ans.push_back(pq.top().second.first);
            pq.pop();
        }
        return ans;
    }
};
