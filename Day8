974. Subarray Sums Divisible by K
class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        int ans = 0;
        unordered_map<int,int>m;
        vector<int>prefixSum(nums.size(),0);
        m[0]++;
        prefixSum[0] = nums[0];
        for(int i=1;i<nums.size();i++){
            prefixSum[i] = prefixSum[i-1] + nums[i];
        }
        for(int i=0;i<nums.size();i++){
            prefixSum[i] = (prefixSum[i] % k + k) % k;
        }
        for(int i=0;i<prefixSum.size();i++){
            if(m.find(prefixSum[i]) != m.end()){
                ans += m[prefixSum[i]];
            }
            m[prefixSum[i]]++;
        }
        return ans;

    }
};


236. Lowest Common Ancestor of a Binary Tree
class Solution {
public:
    TreeNode* ans;
    int solve(TreeNode* root, TreeNode* p, TreeNode* q){
        if(root == NULL)return 0;
        int l = solve(root->left,p,q);
        int r = solve(root->right,p,q);
        if((l==1 && r==1) || (((l==0 && r==1) || (l==1 && r==0)) && ((root->val == p->val) || (root->val == q->val)))){
            ans = root;
        }
        else if((l== 1 && r==0) && (r==1 && l==0))return 1;
        else if((root->val == p->val) || (root->val == q->val))return 1;
        return l+r;
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root == NULL)return NULL;
        solve(root,p,q);
        return ans;
    }
};


199. Binary Tree Right Side View
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int>ans;
        if(root == NULL)return ans;
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
            int sz = q.size();
            ans.push_back(q.front()->val);
            while(sz--){
                TreeNode* node = q.front();
                q.pop();
                if(node->right)q.push(node->right);
                if(node->left)q.push(node->left);
            }
        }
        return ans;
    }
};
