53. Maximum Subarray
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int MaxSum = nums[0];
        int currSum = 0;
        for(int i=0;i<nums.size();i++){
            currSum += nums[i];
            MaxSum = max(MaxSum, currSum);
            if(currSum < 0)currSum = 0;
        }
        return MaxSum;
    }
};


121. Best Time to Buy and Sell Stock
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int maxProf = INT_MIN;
        int minPrice = INT_MAX;
        for(int i=0;i<prices.size();i++){
            minPrice = min(minPrice, prices[i]);
            maxProf = max(maxProf, prices[i] - minPrice);
        }
        return maxProf;
    }
};

42. Trapping Rain Water
class Solution {
public:
    int trap(vector<int>& height) {
        int ans = 0;
        int n = height.size();
        vector<int>leftMaxi(n);
        leftMaxi[0] = height[0];
        vector<int>rightMaxi(n);
        rightMaxi[n-1] = height[n-1];
        for(int i=1;i<height.size();i++){
            leftMaxi[i] = max(leftMaxi[i-1], height[i]);
        }
        for(int i=n-2;i>=0;i--){
            rightMaxi[i] = max(rightMaxi[i+1], height[i]);
        }
        vector<int>minNum(n);
        for(int i=0;i<height.size();i++){
            minNum[i] = min(leftMaxi[i], rightMaxi[i]);
        }
        for(int i=0;i<height.size();i++){
            ans += abs(minNum[i] - height[i]);
        }
        return ans;
    }
};
