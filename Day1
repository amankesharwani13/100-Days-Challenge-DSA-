257. Binary Tree Paths
class Solution {
public:
    void solve(TreeNode* root, vector<string>& ans, string s) {
        if (root == NULL) {
            return;
        }
        if (root->left == NULL && root->right == NULL) {
            s += to_string(root->val);
            ans.push_back(s);
            s.pop_back();
            return;
        }
        s += to_string(root->val) + "->";
        solve(root->left, ans, s);
        solve(root->right, ans, s);

        s.pop_back();
    }
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> ans;
        string s;
        solve(root, ans, s);
        return ans;
    }
};

235. Lowest Common Ancestor of a Binary Search Tree
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if (root == NULL)
            return NULL;
        if (root->val < p->val && root->val < q->val) {
            return lowestCommonAncestor(root->right, p, q);
        } else if (root->val > p->val && root->val > q->val) {
            return lowestCommonAncestor(root->left, p, q);
        } else
            return root;
    }
};
