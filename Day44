2196. Create Binary Tree From Descriptions
class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {
        // set<int>s;
        // unordered_map<int,TreeNode*>m;
        // for(int i=0;i<descriptions.size();i++){
        //     if(m.find(descriptions[i][0]) != m.end()){
        //         TreeNode* temp = m[descriptions[i][0]];
        //         if(descriptions[i][2] == 1){
        //             TreeNode* l = new TreeNode(descriptions[i][1]);
        //             temp->left = l;
        //             m[descriptions[i][1]] = l;
        //         }
        //         else{
        //             TreeNode* r = new TreeNode(descriptions[i][1]);
        //             temp->right = r;
        //             m[descriptions[i][1]] = r;
        //         }
        //         s.insert(descriptions[i][1]);
        //     }
        //     else{
        //         TreeNode* temp = new TreeNode(descriptions[i][0]);
        //         m[descriptions[i][0]] = temp;
        //         if(descriptions[i][2] == 1){
        //             TreeNode* l = new TreeNode(descriptions[i][1]);
        //             temp->left = l;
        //             m[descriptions[i][1]] = l;
        //         }
        //         else{
        //             TreeNode* r = new TreeNode(descriptions[i][1]);
        //             temp->right = r;
        //             m[descriptions[i][1]] = r;
        //         }
        //         s.insert(descriptions[i][1]);
        //     }
        // }
        // int roots = -1;
        // for(int i=0;i<descriptions.size();i++){
        //     if(s.find(descriptions[i][0]) == s.end()){
        //           roots = descriptions[i][0];
        //           break;
        //     }
        // }
        // for(auto x:m){
        //     if(x.first == roots)return x.second; 
        // }
        // return NULL;



        set<int>s;
        unordered_map<int,TreeNode*>m;
        for(int i=0;i<descriptions.size();i++){
            int parent = descriptions[i][0];
            int child = descriptions[i][1];
            bool isLeft = descriptions[i][2];

            if(m.find(parent) == m.end()){
                m[parent] = new TreeNode(parent);
            }

            if(m.find(child) == m.end()){
                m[child] = new TreeNode(child);
            }

            if(isLeft){
                m[parent]->left = m[child];
            }
            else{
                m[parent]->right = m[child];
            }
            s.insert(descriptions[i][1]);
        }
        int roots = -1;
        for(int i=0;i<descriptions.size();i++){
            if(s.find(descriptions[i][0]) == s.end()){
                  roots = descriptions[i][0];
                  break;
            }
        }
        for(auto x:m){
            if(x.first == roots)return x.second; 
        }
        return NULL;

    }
};


416. Partition Equal Subset Sum
class Solution {
public:
    
    int solve(vector<int>& nums, int sum, int n){
        int t[n+1][sum+1];
        for(int i=0;i<n+1;i++){
            for(int j=0;j<sum+1;j++){
                if(i == 0)t[i][j] = 0;
                if(j == 0)t[i][j] = 1;
            }
        }
        for(int i=1;i<n+1;i++){
            for(int j=1;j<sum+1;j++){
                if(nums[i-1] <= j){
                    t[i][j] = t[i-1][j-nums[i-1]] || t[i-1][j];
                }
                else{
                    t[i][j] = t[i-1][j];
                }
            }
        }
        return t[n][sum];
    }
    bool canPartition(vector<int>& nums) {
        int sum = 0, n = nums.size();
        for(int i=0;i<nums.size();i++){
             sum += nums[i];
        }
        if(sum % 2 != 0)return false;
        int half = sum/2;
        return solve(nums, half, n);
    }
};
