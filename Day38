1701. Average Waiting Time
class Solution {
public:
    double averageWaitingTime(vector<vector<int>>& customers) {
        double ans = 0.00000;
        int n = customers.size();
        double waitingTime = customers[0][1], currTime = customers[0][0] + customers[0][1];
        for(int i=1;i<n;i++){
            if(currTime >= customers[i][0]){
             currTime += customers[i][1];
             waitingTime += (currTime - customers[i][0]);
            }
            else{
                currTime = customers[i][0] + customers[i][1];
                waitingTime += customers[i][1];
            }
        }
        ans = (double)waitingTime/n;
        return ans;
    }
};


1382. Balance a Binary Search Tree
class Solution {
public:
    void inorder(TreeNode* root, vector<int>& v){
        if(root == NULL)return;
        inorder(root->left, v);
        v.push_back(root->val);
        inorder(root->right, v);
    }
    TreeNode* balanced(int s, int e, vector<int>& v){
        if(s > e)return NULL;
        int mid = s + (e - s)/2;
        TreeNode* temp = new TreeNode(v[mid]);
        temp->left = balanced(s, mid-1, v);
        temp->right = balanced(mid+1, e, v);
        return temp;
    }
    TreeNode* balanceBST(TreeNode* root) {
        if(root == NULL)return root;
        vector<int>v;
        inorder(root, v);
        int s = 0, e = v.size() - 1;
        return balanced(s, e, v);
    }
};

452. Minimum Number of Arrows to Burst Balloons
class Solution {
public:
    static bool compare(vector<int>& a, vector<int>& b){
        return a[1] < b[1];
    }
    int findMinArrowShots(vector<vector<int>>& points) {
        sort(points.begin(),points.end(),compare);
        int arrow = 1, end = points[0][1];
        for(int i=1;i<points.size();i++){
            if(points[i][0] <= end)continue;
            else{
                arrow++;
                end = points[i][1];
            }
        }
        return arrow;
    }
};
