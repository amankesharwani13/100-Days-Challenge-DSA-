1823. Find the Winner of the Circular Game
class Solution {
public:
    int findTheWinner(int n, int k) {
        queue<int>q;
        for(int i=1;i<=n;i++){
            q.push(i);
        }
        while(q.size() > 1){
            int x = k;
            while(x--){
                if(x == 0){
                    q.pop();
                    break;
                }
                int p = q.front();
                q.pop();
                q.push(p);
            }
        }
        return q.front();
    }
};


105. Construct Binary Tree from Preorder and Inorder Traversal
class Solution {
public:
    int findposition(vector<int>&inorder, int element, int n){
        for(int i=0;i<n;i++){
            if(inorder[i] == element)return i;
        }
        return -1;
    }
    TreeNode* solve(vector<int>& preorder, vector<int>& inorder, int &preIndex, int startInorder, int endInorder, int n){
        if(preIndex >= n || startInorder > endInorder)return NULL;
        int element = preorder[preIndex++];
        TreeNode* root = new TreeNode(element);
        int position = findposition(inorder,element,n);

        root->left = solve(preorder, inorder, preIndex , startInorder, position -1, n);
        root->right = solve(preorder, inorder, preIndex , position +1 ,endInorder,n);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int preIndex = 0, n =inorder.size();
        TreeNode* ans = solve(preorder,inorder,preIndex,0,n-1,n);
        return ans;
    }
};
