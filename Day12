135. Candy
class Solution {
public:
    int candy(vector<int>& ratings) {
        int ans = 0;
        vector<int>v(ratings.size(),1);
        for(int i=0;i<v.size()-1;i++){
            if(ratings[i+1] > ratings[i]){
                if(v[i+1] > v[i]){
                    continue;
                }
                else{
                    v[i+1] = v[i] + 1;
                }
            }
        }

        for(int i=v.size()-1;i>0;i--){
            if(ratings[i-1] > ratings[i]){
                if(v[i-1] > v[i]){
                    continue;
                }
                else{
                    v[i-1] = v[i] + 1;
                }
            }
        }

        for(int i=0;i<v.size();i++){
            ans += v[i];
        }
        return ans;
    }
};

2037. Minimum Number of Moves to Seat Everyone
class Solution {
public:
    int minMovesToSeat(vector<int>& seats, vector<int>& students) {
        int ans = 0;
        sort(seats.begin(),seats.end());
        sort(students.begin(),students.end());
        for(int i=0;i<seats.size();i++){
            ans += abs(seats[i] - students[i]);
        }
        return ans;
    }
};


493. Reverse Pairs
class Solution {
public:
    int ans = 0;
    void merge(vector<int>&nums, int s, int e, int mid){
        int len1 = mid-s+1;
        int len2 = e-mid;
        int *first = new int[len1];
        int *second = new int[len2];
        int k = s;
        for(int i=0;i<len1;i++){
            first[i] = nums[k++];
        }
        k = mid+1;
        for(int i=0;i<len2;i++){
            second[i] = nums[k++];
        }

        // reverse pair count start
        int j = 0, count = 0;
        for(int i=0;i<len1;i++){
            while(j < len2 && first[i] > (long)2 * second[j]){
                j++;
            }
            count += j;
        }
        ans += count;
        // end

        int index1 = 0, index2 = 0;
        k = s;  // take don't put k = 0 here
        while(index1 < len1 && index2 <len2){
            if(first[index1] < second[index2]){
                nums[k++] = first[index1++];
            }
            else{
                nums[k++] = second[index2++];
            }
        }
        while(index1 < len1){
            nums[k++] = first[index1++];
        }
        while(index2 < len2){
            nums[k++] = second[index2++];
        }
        delete []first;
        delete []second;

    }
    void mergesort(vector<int>&nums, int s, int e){
        if(s >= e)return;
        int mid = s + (e-s)/2;
        mergesort(nums, s, mid);
        mergesort(nums, mid+1, e);
        merge(nums, s, e, mid);
    }
    int reversePairs(vector<int>& nums) {
        int n = nums.size();
        int s = 0, e = n-1;
        mergesort(nums, s, e);
        return ans;
    }
};


775. Global and Local Inversions
class Solution {
public:
    long global = 0;

    void merge(vector<int>& nums, int s, int mid, int e) {
        int len1 = mid - s + 1;
        int len2 = e - mid;
        int* first = new int[len1];
        int* second = new int[len2];
        int k = s;
        for (int i = 0; i < len1; i++) {
            first[i] = nums[k++];
        }
        k = mid + 1;
        for (int i = 0; i < len2; i++) {
            second[i] = nums[k++];
        }

        // global inversion start
        int j = 0, count = 0;
        for (int i = 0; i < len1; i++) {
            while (j < len2 && first[i] > second[j]) {
                j++;
            }
            count += j;
        }
        global += count;
        // end

        int index1 = 0, index2 = 0;
        k = s;
        while (index1 < len1 && index2 < len2) {
            if (first[index1] < second[index2]) {
                nums[k++] = first[index1++];
            } else {
                nums[k++] = second[index2++];
            }
        }
        while (index1 < len1) {
            nums[k++] = first[index1++];
        }
        while (index2 < len2) {
            nums[k++] = second[index2++];
        }

        delete[] first;
        delete[] second;
    }

    void mergesort(vector<int>& nums, int s, int e) {
        if (s >= e)
            return;
        int mid = s + (e - s) / 2;
        mergesort(nums, s, mid);
        mergesort(nums, mid + 1, e);
        merge(nums, s, mid, e);
    }

    bool isIdealPermutation(vector<int>& nums) {
        int s = 0, e = nums.size() - 1;
        int local = 0;
        for (int i = 0; i < nums.size() - 1; i++) {
            if (nums[i] > nums[i + 1])local++;
        }
        mergesort(nums, s, e);
        // cout<<global<<" "<<local<<endl;
        return global == local;
    }
};



           OR


class Solution {
public:

    bool isIdealPermutation(vector<int>& nums) {
        for(int i=0;i<nums.size();i++){
            if(abs(nums[i] - i) == 0 || abs(nums[i] - i) == 1 )continue;
            else return false;
        }
        return true;
    }
};


1318. Minimum Flips to Make a OR b Equal to c
class Solution {
public:
    int minFlips(int a, int b, int c) {
        int x, y, z, cnt = 0;
        for(int i=0;i<32;i++){
            x = a & (1<<i);
            y = b & (1<<i);
            z = c & (1<<i);
            if(z != 0 && x == 0 && y == 0)cnt += 1;
            else if(z == 0 && x != 0 && y == 0)cnt += 1;
            else if(z == 0 && x == 0 && y != 0)cnt += 1;
            else if(z == 0 && x != 0 && y != 0)cnt += 2;
        }
        return cnt;
    }
};
