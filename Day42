2751. Robot Collisions
class Solution {
public:
    vector<int> survivedRobotsHealths(vector<int>& positions, vector<int>& healths, string directions) {
        int n = positions.size();
        vector<pair<int,vector<int>>>v(n);
        for(int i=0;i<n;i++){
            v[i] = {positions[i], {i, healths[i], directions[i]}};
        }
        sort(v.begin(), v.end());
        stack<pair<int,vector<int>>>st;
        vector<pair<int,vector<int>>>ans;
        for(int i=0;i<n;i++){
            if(v[i].second[2] == 'R'){
                st.push(v[i]);
            }
            else if(st.size() == 0 && v[i].second[2] == 'L')ans.push_back(v[i]);
            else{
                bool ok = true;
                while(!st.empty()){
                    pair<int,vector<int>>temp = st.top();
                    st.pop();
                    if(temp.second[1] == v[i].second[1]){
                        ok = false;
                        break;
                    }
                    else if(temp.second[1] > v[i].second[1]){
                        temp.second[1]--;
                        st.push(temp);
                        ok = false;
                        break;
                    }
                    else{
                        v[i].second[1]--;
                        continue;
                    }
                }
                if(ok == true)ans.push_back(v[i]);
            }
        }
        while(!st.empty()){
            ans.push_back(st.top());
            st.pop();
        }
        for(int i=0;i<ans.size();i++){
            swap(ans[i].first, ans[i].second[0]);
        }
        sort(ans.begin(), ans.end());
        vector<int>result;
        for(int i=0;i<ans.size();i++){
            result.push_back(ans[i].second[1]);
        }
        return result;
    }
};


688. Knight Probability in Chessboard
class Solution {
public:
    
    double solve(int n, int k, int row, int column, vector<vector<vector<double>>>& memo){
        if(row < 0 || column < 0 || row >= n || column >= n)return 0;
        if(k == 0)return 1;
        double ans = 0.0;
        if(memo[row][column][k] != -1)return memo[row][column][k];
        int arr[8][8] = {{1,2}, {2,1}, {2,-1}, {1,-2}, {-1,-2}, {-2,-1}, {-2,1}, {-1,2}};
        for(int i=0;i<8;i++){
            int newrow = row + arr[i][0];
            int newcol = column + arr[i][1];
            if(newrow >=0 && newrow < n && newcol >= 0 && newcol < n){
                ans += solve(n, k-1, newrow, newcol, memo)/8.0;
            }
        }
        memo[row][column][k] = ans;
        return ans;
    }
    double knightProbability(int n, int k, int row, int column) {
        vector<vector<vector<double>>>memo(n,vector<vector<double>>(n, vector<double>(k+1, -1)));
        return solve(n, k, row, column, memo);
    }
};
