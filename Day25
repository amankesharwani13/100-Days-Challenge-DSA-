1382. Balance a Binary Search Tree
class Solution {
public:
    void inorder(TreeNode* root, vector<TreeNode*>&v){
        if(root == NULL)return; 
        inorder(root->left, v);
        v.push_back(root);
        inorder(root->right, v);
    }
    TreeNode* balance(TreeNode* root, vector<TreeNode*>&v, int s, int e){
        if(s > e)return NULL;
        int mid = s + (e - s)/2;
        v[mid]->left = balance(root, v, s, mid-1);
        v[mid]->right = balance(root, v, mid+1, e);
        return v[mid];
    }
    TreeNode* balanceBST(TreeNode* root) {
        vector<TreeNode*>v;
        inorder(root, v);
        return balance(root, v, 0, v.size()-1);
    }
};


846. Hand of Straights
class Solution {
public:
    bool isNStraightHand(vector<int>& hand, int groupSize) {
        int n = hand.size();
        if(n % groupSize != 0)return false;
        unordered_map<int,int>m;
        for(int i=0;i<hand.size();i++){
            m[hand[i]]++;
        }
        sort(hand.begin(),hand.end());
        for(int i=0;i<hand.size();i++){
            if(m[hand[i]] == 0)continue;
            for(int k=0; k< groupSize;k++){
                if(m[hand[i] + k] == 0)return false;
                m[hand[i] + k]--;
            }
        }
        return true;
    }
};


3110. Score of a String
class Solution {
public:
    int scoreOfString(string s) {
        int ans = 0;
        for(int i=0;i<s.length()-1;i++){
            ans += abs(s[i] - s[i+1]);
        }
        return ans;
    }
};
