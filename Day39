1598. Crawler Log Folder
class Solution {
public:
    int minOperations(vector<string>& logs) {
        int count = 0;
        for(int i=0;i<logs.size();i++){
            for(int j=0;j<logs[i].size();j++){
                if(logs[i][j] == '.' && logs[i][j+1] == '.' && count > 0){
                    count--;
                    break;
                }
                else if(logs[i][j] == '.' && logs[i][j+1] == '/')break;
                else if(logs[i][j] == '/'){
                    count++;
                    break;
                }
            }
        }
        return count;
    }
};


1235. Maximum Profit in Job Scheduling
class Solution {
public:
    int solve(int i, vector<vector<int>>& job, vector<int>& startTime, int n, vector<int>& dp){
        if(i>= n)return 0;
        if(dp[i] != -1)return dp[i];
        int index = lower_bound(startTime.begin(), startTime.end(), job[i][1]) - startTime.begin();
        int pick = job[i][2] + solve(index, job, startTime, n, dp);
        int notpick = solve(i+1, job, startTime, n, dp);
        return dp[i] = max(pick, notpick);
    }
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        int n = startTime.size();
        vector<vector<int>>job;
        vector<int>dp(n,-1);
        for(int i=0;i<n;i++){
            job.push_back({startTime[i], endTime[i], profit[i]});
        }
        sort(job.begin(),job.end());
        sort(startTime.begin(),startTime.end());
        return solve(0, job, startTime, n, dp);
    }
};

1094. Car Pooling
class Solution {
public:
    bool carPooling(vector<vector<int>>& trips, int capacity) {
        map<int,int>m;
        for(int i=0;i<trips.size();i++){
            int start = trips[i][1];
            int end = trips[i][2];
            m[start] += trips[i][0];
            m[end] -= trips[i][0];
        }
        int sum = 0;
        for(auto x: m){
            sum += x.second;
            if(sum > capacity)return false;
        }
        return true;
    }
};
