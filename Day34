2461. Maximum Sum of Distinct Subarrays With Length K
class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        long long ans = 0, sum = 0;
        if(nums.size() < k)return 0;
        unordered_map<int,int>m;
        for(int i=0;i<k;i++){
            sum += nums[i];
            m[nums[i]]++;
        }
        if(m.size() == k)ans = sum;
        for(int i=k;i<nums.size();i++){
            sum += (nums[i] - nums[i-k]);
            m[nums[i]]++;
            m[nums[i-k]]--;
            if(m[nums[i-k]] == 0)m.erase(nums[i-k]);
            if(m.size() == k)ans = max(sum, ans);
        }
        return ans;
    }
};


2058. Find the Minimum and Maximum Number of Nodes Between Critical Points
class Solution {
public:
    vector<int> nodesBetweenCriticalPoints(ListNode* head) {
        vector<int>v;
        vector<int>num;
        vector<int>ans(2,-1);
        while(head != NULL){
            v.push_back(head->val);
            head = head->next;
        }
        if(v.size() < 4)return ans;
        for(int i=1;i<v.size()-1;i++){
            if(v[i] > v[i-1] && v[i] > v[i+1])num.push_back(i+1);
            else if(v[i] < v[i-1] && v[i] < v[i+1])num.push_back(i+1);
        }
        if(num.size() <= 1)return ans;
        int mini = INT_MAX;
        for(int i=1;i<num.size();i++){
            mini = min(mini, abs(num[i-1] - num[i]));
        }
        if(mini != INT_MAX)ans[0] = mini;
        ans[1] = num[num.size()-1] - num[0];
        return ans;
    }
};
