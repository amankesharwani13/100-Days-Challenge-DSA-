1038. Binary Search Tree to Greater Sum Tree
class Solution {
public:
    void solve(TreeNode* p, int &currSum){
        if(p == NULL)return;
        solve(p->right, currSum);
        currSum = currSum + p->val;
        p->val = currSum;
        solve(p->left, currSum);
    }
    TreeNode* bstToGst(TreeNode* root) {
        if(root == NULL)return root;
        TreeNode* p = root;
        int currSum  = 0;
        solve(p, currSum);
        return root;
    }
};

48. Rotate Image
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n =matrix.size();
        for(int i=0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                swap(matrix[i][j],matrix[j][i]);
            }
        }
        for(int i=0;i<n;i++){
        reverse(matrix[i].begin(), matrix[i].end());
        }
    }
};

54. Spiral Matrix
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int>ans;
        int count = 0;
        int row = matrix.size();
        int col = matrix[0].size();
        int total = row*col;
        int startingrow = 0;
        int endingrow = row - 1;
        int startingcol = 0;
        int endingcol = col - 1;
        while(count < total){
            for(int index = startingcol; index <= endingcol && count < total; index++){
                  ans.push_back(matrix[startingrow][index]);
                  count++;
            }
            startingrow++;
            for(int index = startingrow; index <= endingrow && count < total; index++){
                  ans.push_back(matrix[index][endingcol]);
                  count++;
            }
            endingcol--;
            for(int index = endingcol; index >= startingcol && count < total; index--){
                  ans.push_back(matrix[endingrow][index]);
                  count++;
            }
            endingrow--;
            for(int index = endingrow; index >= startingrow && count < total; index--){
                  ans.push_back(matrix[index][startingcol]);
                  count++;
            }
            startingcol++;
        }
        return ans;
    }
};
